{
	"info": {
		"_postman_id": "5633ef97-87d9-4fbd-8535-8832e89ec37d",
		"name": "HW_1.5_group_24",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}first",
					"host": [
						"{{URL}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let req = request.data;\r",
							"let resp = pm.response.json();\r",
							"\r",
							"pm.test(\"Test Name \", function () {\r",
							"    resp = pm.response.json();\r",
							"    pm.expect(resp.name).to.eql(\"Oleg\");\r",
							"    console.log(resp.name);\r",
							"})\r",
							"\r",
							"pm.test(\"Test age \", function(){\r",
							"    resp = pm.response.json();\r",
							"    pm.expect(resp.age).to.eql(\"24\");\r",
							"    console.log(resp.age);\r",
							"})\r",
							"\r",
							"pm.test(\"Test salary \", function(){\r",
							"    resp = pm.response.json();\r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"    console.log(resp.salary);\r",
							"})\r",
							"\r",
							"pm.test(\"Test request name\", function(){\r",
							"    let req_name = req.name;\r",
							"    pm.expect(resp.name).to.eql(req_name);\r",
							"    console.log(resp.name);\r",
							"    console.log(req_name);\r",
							"})\r",
							"\r",
							"pm.test(\"Test request age\", function(){\r",
							"    let req_name = req.age;\r",
							"    pm.expect(resp.age).to.eql(req_name);\r",
							"    console.log(resp.age);\r",
							"    console.log(req_name);\r",
							"})\r",
							"\r",
							"pm.test(\"Test request salary\", function(){\r",
							"    let req_name = parseInt(req.salary);\r",
							"    pm.expect(resp.salary).to.eql(req_name);\r",
							"    console.log(resp.salary);\r",
							"    console.log(req_name);\r",
							"})\r",
							"\r",
							"console.log(resp.family);\r",
							"\r",
							"pm.test(\"U_salary\", function(){\r",
							"    let salary = resp.family.u_salary_1_5_year;\r",
							"    pm.expect(salary).to.eql(req.salary*4);\r",
							"    console.log(salary);\r",
							"    console.log(req.salary*4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleg",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}user_info_3",
					"host": [
						"{{URL}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"let resp = pm.response.json();\r",
							"\r",
							"pm.test(\"Name req = name resp\", function(){\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"})\r",
							"pm.test(\"age req = age resp\", function(){\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"})\r",
							"pm.test(\"salary req = salary resp\", function(){\r",
							"    let resp_sal = JSON.stringify(resp.salary);\r",
							"    pm.expect(resp_sal).to.eql(req.salary);\r",
							"})\r",
							"\r",
							"console.log(resp.family);\r",
							"\r",
							"pm.test(\"dog has name_param \", function(){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"})\r",
							"pm.test(\"dog has age_param \", function(){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"})\r",
							"pm.test(\"Dog Name == Luky \", function(){\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"})\r",
							"pm.test(\"Dog Age == 4\", function(){\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}object_info_3?name=Oleg&age=24&salary=1000",
					"host": [
						"{{URL}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleg"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "obect_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"Name resp = name req\", function(){\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"})\r",
							"pm.test(\"Age resp = age req\", function(){\r",
							"    age = JSON.stringify(resp.age);\r",
							"    pm.expect(age).to.eql(req.age);\r",
							"})\r",
							"\r",
							"console.log(req.salary);\r",
							"console.log(resp.salary);\r",
							"console.log(resp.salary[0]);\r",
							"console.log(resp.salary[1]);\r",
							"console.log(resp.salary[2]);\r",
							"\r",
							"pm.test(\"Salary[0] = salary request\", function(){\r",
							"    let sal = JSON.stringify(resp.salary[0]);\r",
							"    pm.expect(sal).to.eql(req.salary);\r",
							"})\r",
							"pm.test(\"Salary[1] = salary*2 request\", function(){\r",
							"    let sal = parseInt(resp.salary[1]);\r",
							"    pm.expect(sal).to.eql(req.salary*2);\r",
							"})\r",
							"pm.test(\"Salary[2] = salary*3 request\", function(){\r",
							"    let sal = parseInt(resp.salary[2]);\r",
							"    pm.expect(sal).to.eql(req.salary*3);\r",
							"})\r",
							"pm.environment.set(\"name\", req.name);\r",
							"pm.environment.set(\"age\", req.age);\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"let arr = resp.salary;\r",
							"for (i of arr){\r",
							"    console.log(\"Item == \", i);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}object_info_4?name=Oleg&age=24&salary=1000",
					"host": [
						"{{URL}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleg"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = JSON.parse(responseBody);\r",
							"let req = request.data;\r",
							"\r",
							"pm.test(\"Response have property --- start_qa_salary \", function(){\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"})\r",
							"pm.test(\"Response have property --- qa_salary_after_6_months \", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"})\r",
							"pm.test(\"Response have property --- qa_salary_after_12_months \", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"pm.test(\"Response have property --- qa_salary_after_1.5_year \", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"pm.test(\"Response have property --- qa_salary_after_3.5_years \", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"})\r",
							"pm.test(\"Response have property --- person \", function(){\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"})\r",
							"\r",
							"pm.test(\"Salary == start_qa_salary\", function(){\r",
							"    let sal = JSON.stringify(resp.start_qa_salary);\r",
							"    pm.expect(sal).to.eql(req.salary);\r",
							"})\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months == salary*2 \", function(){\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"})\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months == salary*2.7 \", function(){\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"})\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year == salary*3.3 \", function(){\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							"})\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years == salary*3.8 \", function(){\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8);\r",
							"})\r",
							"\r",
							"pm.test(\"u_name[1] in Person == salary from request \", function(){\r",
							"    let sal =JSON.stringify(resp.person.u_name[1]);\r",
							"    pm.expect(sal).to.eql(req.salary);\r",
							"})\r",
							"\r",
							"pm.test(\"u_age from response == age from request \", function(){\r",
							"    let age =JSON.stringify(resp.person.u_age);\r",
							"    pm.expect(age).to.eql(req.age);\r",
							"})\r",
							"\r",
							"pm.test(\"u_salary_5_years == salary*4.2 \", function(){\r",
							"    let sal = resp.person.u_salary_5_years;\r",
							"    pm.expect(sal).to.eql(req.salary*4.2);\r",
							"})\r",
							"\r",
							"let ar = pm.response.json().person;\r",
							"for (let i of Object.keys(ar)) {\r",
							"    var items = ar[i];\r",
							"    console.log(i,items);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}user_info_2",
					"host": [
						"{{URL}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}